<p id="notice"><%= notice %></p>
<% if @debug %>
<pre><%= @debug %></pre>
<pre><%= @players %></pre>
<pre><%= @achpl.inspect %></pre>
<% end %>


	<%	
		cssColors = [ 'red', 'green', 'orange', 'purple', 'cyan', 'white', 'black' ]
	%>
	<script>
	// waitingDialog.show('Custom message'); (from https://github.com/ehpc/bootstrap-waitingfor)
	!function(e,d){"use strict";"function"==typeof define&&define.amd?define(["jquery"],function(a){return e.waitingDialog=d(a)}):e.waitingDialog=e.waitingDialog||d(e.jQuery)}(this,function(e){"use strict";function d(d){return d&&d.remove(),e('<div class="modal fade" data-backdrop="static" data-keyboard="false" tabindex="-1" role="dialog" aria-hidden="true" style="padding-top:15%; overflow-y:visible;"><div class="modal-dialog modal-m"><div class="modal-content"><div class="modal-header" style="display: none;"></div><div class="modal-body"><div class="progress progress-striped active" style="margin-bottom:0;"><div class="progress-bar" style="width: 100%"></div></div></div></div></div></div>')}var a,o;return{show:function(n,i){"undefined"==typeof i&&(i={}),"undefined"==typeof n&&(n="Loading"),o=e.extend({headerText:"",headerSize:3,headerClass:"",dialogSize:"m",progressType:"",contentElement:"p",contentClass:"content",onHide:null,onShow:null},i);var s,t;a=d(a),a.find(".modal-dialog").attr("class","modal-dialog").addClass("modal-"+o.dialogSize),a.find(".progress-bar").attr("class","progress-bar"),o.progressType&&a.find(".progress-bar").addClass("progress-bar-"+o.progressType),s=e("<h"+o.headerSize+" />"),s.css({margin:0}),o.headerClass&&s.addClass(o.headerClass),t=e("<"+o.contentElement+" />"),o.contentClass&&t.addClass(o.contentClass),o.headerText===!1?(t.html(n),a.find(".modal-body").prepend(t)):o.headerText?(s.html(o.headerText),a.find(".modal-header").html(s).show(),t.html(n),a.find(".modal-body").prepend(t)):(s.html(n),a.find(".modal-header").html(s).show()),"function"==typeof o.onHide&&a.off("hidden.bs.modal").on("hidden.bs.modal",function(){o.onHide.call(a)}),"function"==typeof o.onShow&&a.off("shown.bs.modal").on("shown.bs.modal",function(){o.onShow.call(a)}),a.modal()},hide:function(){"undefined"!=typeof a&&a.modal("hide")},message:function(e){return"undefined"!=typeof a?"undefined"!=typeof e?a.find(".modal-header>h"+o.headerSize).html(e):a.find(".modal-header>h"+o.headerSize).html():void 0}}});
	</script>
	<script>
		var isRefreshing = false;
		
		function setLevel(level) {
			var newUrl = $.query.set("level", level);
			location.href=newUrl;
			
		}
		function setAdd() {
			var newUrl = $.query.set("add", 1);
			location.href=newUrl;
			
		}
		function setSearch() {
			var newUrl = $.query
				.set("search", $('input:first').val());
			location.href=newUrl;
		}
		function setPage(page) {
			var newUrl = $.query.set("p", page);
			location.href=newUrl;
		}
		function searchPlayer() {
			$("#addPlayerModal").modal('hide');
			var pseudo = $("#search-player").val();
			$("#search-player").val('');
			waitingDialog.show('Searching...');
			$.ajax({
				url: "/players/search.json",
				dataType: 'json',
				data: {
					query: pseudo
				},
				success: function(data) { 
					waitingDialog.hide();
					showFoundPlayers(data);
				}
			});
			return false;
		}
		function checkRefreshPending() {
			var pids = $.query.get("pid");
			$.ajax({
				url: "/players/isRefreshPending.json",
				dataType: 'json',
				data: {
					cgids: pids
				},
				success: function(data) { 
					checkRefreshPendingResult(data);
					setTimeout(function () {
						checkRefreshPending();
					}, 6000);	
				}
			});
		}
		// This is called on callback from isRefreshPending API : data contains infos about which player is currently refreshing (if any)
		function checkRefreshPendingResult(data) {
			players = data.players;
			for(index = 0, len = players.length; index < len; ++index) {
				player=players[index];
				if (player.refresh_pending) {
					$(".legend-player.cgid-" + player.cgid + " .refresh").addClass("pending");
				}else{
					$(".legend-player.cgid-" + player.cgid + " .refresh").removeClass("pending");
				}
			}
			if (data.refresh_pending==0){
				// Button REFRESH should be enabled
				// $('#doRefresh').removeClass('pending');
				$('#doRefresh').removeClass('disabled');
				if (isRefreshing) {
					// Some user WAS refreshing, and it's done, so refresh the page now
					location.reload();
				}
			} else {
				isRefreshing = true;
				$('#doRefresh').addClass('pending').addClass('disabled');
				
			}
		}
		function refresh() {
			$('#doRefresh').addClass('pending').addClass('disabled');
			var pids = $.query.get("pid");
			$.ajax({
				url: "/players/refresh.json",
				dataType: 'json',
				data: {
					cgids: pids
				},
				success: function(data) { 
					// not really necessary, but will make the page refresh to let think the user somethink worked, even if there's nothing to do
					// TODO : maybe I should FORCE a refresh here if the server told there was no need for it (less than 10mns old data)
					isRefreshing = true;
				}
			});
		}
		function showFoundPlayers(list) {
			$("#foundPlayersModal").modal('show');
			$("#playersList").html('');
			$.each(list, function (i,item) {
				console.log(item);
				$('<div class="player" onClick="appendPlayer('+ item.cgid +')"><div class="rank">#'+item.rank + '</div>'+ item.pseudo + '</div>').appendTo("#playersList");
			});
		}
		function appendPlayer(pid) {
			$("#foundPlayersModal").modal('hide');
			var oldPid = $.query.get("pid");
			var newPid = ($.query.get("pid")+","+pid)
				.replace(/^,/,'');
			var newUrl = $.query
				.set("pid", newPid )
				.remove("search")
				.remove("add");
			location.href=newUrl;		
		}
		function removePlayer(pid) {
			var oldPid = $.query.get("pid");
			var re = ',?'+pid+',?';
			var newPid = oldPid.replace(new RegExp(re,'g'),",,")
				.replace(/,+/g,',').replace(/^,|,$/g,'');
			var newUrl = $.query
				.set("pid",newPid);
			location.href=newUrl;		
		}
	</script>
		
	<div id="doRefresh" type="button" class="btn btn-default"><span>Refresh</span></div>
<%
	if @pids
%>
		
	<div id="levels" class="btn-toolbar" role="toolbar">
			<div class="btn-group" role="group">
				<a id="easy"   type="button" class="btn btn-default">Easy</a>
				<a id="medium" type="button" class="btn btn-default">Medium</a>
				<a id="hard"   type="button" class="btn btn-default">Hard</a>
				<a id="expert" type="button" class="btn btn-default">Expert</a>
			</div>
			<div class="btn-group" role="group">
				<a id="optim"    type="button" class="btn btn-default">Optimisation</a>
				<a id="codegolf" type="button" class="btn btn-default">Code golf</a>
			</div>
	<!--
			<div class="btn-group" role="group">
				<a id="community" type="button" class="btn btn-default">Community</a>
			</div>
	-->

	</div>
	<a 
		href="/players/ranking?cgids=<%= @pids.join(',') %>" 
		class="btn rank"><span class="glyphicon glyphicon-th-list"
		data-toggle="tooltip" title="Rankings"
		/></a>
	<div id="legends"><%
					colorIdx=0
					for player in @players
			%><span class="legend-<%= cssColors[colorIdx] %> legend-player cgid-<%= player.cgid %>"><div class="refresh"><span></span></div><%= player.pseudo %></span><button pid="<%= player.cgid %>" type="button" class="btn btn-danger btn-xs btn-round remove-player"><span class="glyphicon glyphicon-remove"></span></button>
			<%
						colorIdx += 1
					end
		%>

<% end %>

		<button id="addPlayer" type="button" class="btn icon-btn btn-default" data-toggle="modal" data-target="#addPlayerModal">
			<span class="glyphicon btn-glyphicon glyphicon-plus img-circle text-success"></span>
			Add Player
		</button>
		
		<!-- Modal dialog "Add Player" -->
		<div id="addPlayerModal" class="modal fade" role="dialog">
		  <div class="modal-dialog">
			<!-- Modal content-->
			<div class="modal-content">
			<form class="form-inline" role="form" onSubmit="return searchPlayer()">           
			  <div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Search player</h4>
			  </div>
			  <div class="modal-body col-lg-12">
					<input type="text" class="form-control input-lg" id="search-player" placeholder="Pseudo">
			  </div>
			  <div class="modal-footer">
				<button type="submit" class="btn btn-default">Search</button>
			  </div>
			</form>
			</div>
		  </div>
		</div>

		<!-- Modal dialog "Found Players" -->
		<div id="foundPlayersModal" class="modal fade" role="dialog">
		  <div class="modal-dialog">
			<!-- Modal content-->
			<div class="modal-content">
			  <div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Found players</h4>
			  </div>
			  <div class="modal-body col-lg-12">
					<div>Click on the player to add it :</div>
					<div id="playersList"></div>
			  </div>
			  <div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
			  </div>
			</div>
		  </div>
		</div>

	</div>
	
	
<%
if @pids
%>
	<table class="main-table table table-striped table-header-rotated">
		<thead><tr>
			<th class="table-header color-legend" colspan="2">
			<!--
			<div class="day-legend hover-legend"><span class="glyphicon glyphicon-ok-sign legend-grey new-progress-day"></span><small>Today</small></div>
			<div class="week-legend hover-legend"><span class="glyphicon glyphicon-ok-sign legend-grey new-progress-week"></span><small>Last week</small></div>
			<div class="month-legend hover-legend"><span class="glyphicon glyphicon-ok-sign legend-grey new-progress"></span><small>Last month</small></div>
			-->
			</th>
			
		  <% for lang in @languages %>
		  <th class="rotate-45"><div><span><%= lang.name %></span></div></th>
		  <% end %>

			</tr></thead>
			
		<tbody>
		<% for puzzle in @puzzles %>
			<tr>
			
			<th class="percent" width="50px"><%
			# Partie gauche du tableau : liste des players (indicateurs)
				colorIdx=0
				 for player in @players
				 
					# All the achievements for this player and this puzzle
					achs = @achpl.joins(:achievement).where(player_id: player.id , achievements: { puzzle_id: puzzle.id})
					# Retourne 100 ou 50 ou 0 selon le meilleur achievement trouvé
					best = [0, achs.map{|ap| ap.achievement.text_id.gsub!(/.*_(\d+)P_.*/,'\1').to_i}].flatten.max
					
					glyphClass = case best
						when 100
							"glyphicon-ok-sign"
						when 50
							"glyphicon-unchecked half"
						else
							"glyphicon-remove-circle"
						end
						
					tooltip = "#{ player.pseudo } : #{best}%"
					
					%><span class="touched glyphicon <%= glyphClass %> <%= cssColors[colorIdx] %> cgid-<%= player.cgid %>" data-toggle="tooltip" title="<%= tooltip %>" x="<%= player.id %>" ></span><% 
				 colorIdx += 1
				 end 
			%></th>
			
			<th class="row-header"><a href="http://www.codingame.com<%= puzzle.detailsPageUrl %>" target="_new"><%= puzzle.title %></a></th>
			  <% for lang in @languages %>
				<td>
					  <%
						colorIdx=0
						for pid in @pids 
							key = "#{pid}:#{puzzle.id}:#{lang.id}"
							if @results.key?( key )
						%><span class="glyphicon glyphicon-ok <%= cssColors[colorIdx] %>"></span><%
							end   # if
							colorIdx += 1
						 end # for pid
					  %>
				</td>
			  <% end # for lang
			  %>
		  </tr>
		<% end %>
	  </tbody>
	</table>
		
		</div>
	</div>


	<script>

		$('#levels a').on('click', function(event) {
			event.preventDefault();
			var level = event.target.id;
			setLevel(level);
			});
			
		if ($.query.get("level")) {
			$('#levels #'+$.query.get("level")).addClass('active');
		}

		$('.pagination li a').on('click', function(event) {
			event.preventDefault();
			var page = event.target.parentElement.id;
			setPage(page);
			});
			
		$('#add-player').on('click',  function(event) {
			setAdd();
			});
			
		$('#doRefresh').on('click',  function(event) {
			refresh();
			});
			
		$('#search').submit(function(event) {
			event.preventDefault();
			setSearch();
			});
			
		$('.search-player-result').on('click', function(event) {
			event.preventDefault();
			var pid = $(event.target).attr('pid');
			appendPlayer(pid);
			});
			
		$('.remove-player').on('click', function(event) {
			event.preventDefault();
			var pid = $(this).attr('pid');
			removePlayer(pid);
			});
			
		$('[data-toggle="tooltip"]').tooltip();
		
		// Renvoie une fonction de callback qui agrandit le glyphicon correspondant au selector .new-progress{sel}
		function getScaleCallback(sel,scale) {
			return function(event) {
				$('.new-progress'+sel).css('transform', 'scale('+scale+')');
			};
		}
		
		$('.month-legend').hover(getScaleCallback('',1.5),getScaleCallback('',1.0));
		$('.week-legend').hover(getScaleCallback('-week',1.5),getScaleCallback('-week',1.0));
		$('.day-legend').hover(getScaleCallback('-day',1.5),getScaleCallback('-day',1.0));
		
		// Renvoie une fonction de callback pour la couleur donnee
		function getMasqueCallback(color) {
			return function(event) {
				$("tr:not(:has(.table-header)):has(.touched."+color+" , .table-header) *").toggleClass("montre");
				$("tr:not(:has(.touched."+color+" , .table-header)) *").toggleClass("masque");
			};
		}
		
		var players = <%= raw cssColors.to_json %>;
		players.forEach(function(item,index) { $('.legend-'+item).hover(getMasqueCallback(item)); });
	//	$('.legend-purple').hover(getMasqueCallback('purple'));

		// appelle l'API 'isRefreshPending' à intervalles réguliers
		$( function() {
			checkRefreshPending();		
		});
		
	</script>

<%
	else
%>

<%
	end
%>






<% if @puzzles.empty? %>
	<%= link_to 'Seed puzzles', seed_puzzles_path %>
<% end %>
